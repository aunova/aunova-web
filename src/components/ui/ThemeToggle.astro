---
// ThemeToggle.astro - Manual theme switcher component
---

<button id="theme-toggle" class="theme-toggle" aria-label="Toggle theme">
  <svg class="sun-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <circle cx="12" cy="12" r="5"></circle>
    <line x1="12" y1="1" x2="12" y2="3"></line>
    <line x1="12" y1="21" x2="12" y2="23"></line>
    <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
    <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
    <line x1="1" y1="12" x2="3" y2="12"></line>
    <line x1="21" y1="12" x2="23" y2="12"></line>
    <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
    <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
  </svg>
  <svg class="moon-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
  </svg>
</button>

<style>
  .theme-toggle {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2.5rem;
    height: 2.5rem;
    border: 1px solid var(--color-border);
    border-radius: var(--radius-md);
    background-color: var(--color-background);
    color: var(--color-text);
    cursor: pointer;
    transition: all var(--transition-fast);
    position: relative;
  }

  .theme-toggle:hover {
    background-color: var(--color-gray-100);
    border-color: var(--color-primary);
  }

  .theme-toggle:focus-visible {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }

  .sun-icon,
  .moon-icon {
    position: absolute;
    transition: all var(--transition-fast);
  }

  .sun-icon {
    opacity: 1;
    transform: rotate(0deg) scale(1);
  }

  .moon-icon {
    opacity: 0;
    transform: rotate(90deg) scale(0.8);
  }

  [data-theme="dark"] .sun-icon {
    opacity: 0;
    transform: rotate(-90deg) scale(0.8);
  }

  [data-theme="dark"] .moon-icon {
    opacity: 1;
    transform: rotate(0deg) scale(1);
  }

  @media (prefers-color-scheme: dark) {
    .theme-toggle:hover {
      background-color: var(--color-gray-800);
    }

    :root:not([data-theme]) .sun-icon {
      opacity: 0;
      transform: rotate(-90deg) scale(0.8);
    }

    :root:not([data-theme]) .moon-icon {
      opacity: 1;
      transform: rotate(0deg) scale(1);
    }
  }
</style>

<script is:inline>
  class ThemeToggle {
    constructor() {
      this.theme = localStorage.getItem('theme') || 'light';
      this.init();
    }

    init() {
      this.applyTheme();
      this.bindEvents();
    }

    bindEvents() {
      const button = document.getElementById('theme-toggle');
      if (button) {
        button.addEventListener('click', () => this.toggleTheme());
      }

      // Listen for system theme changes
      if (window.matchMedia) {
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
          if (this.theme === 'system') {
            this.applyTheme();
          }
        });
      }
    }

    toggleTheme() {
      this.theme = this.theme === 'light' ? 'dark' : 'light';
      localStorage.setItem('theme', this.theme);
      this.applyTheme();
    }

    getResolvedTheme() {
      if (this.theme === 'system') {
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      }
      return this.theme;
    }

    applyTheme() {
      const resolvedTheme = this.getResolvedTheme();
      document.documentElement.setAttribute('data-theme', resolvedTheme);
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new ThemeToggle());
  } else {
    new ThemeToggle();
  }
</script>